'''
Uses previously scanned card data to determine which of them is on the frame.\n
Requires a csv generated by the scan_cards.py script.\n
Press the Q key to exit.\n
Author: Leah Castro.\n
No copiar, no distribuír y definitivamente refactoricen antes de subirlo.
'''

import cv2 as cv
from time import perf_counter
from cards import *

CAP_DEVICE = 0
FRAME_COUNT = 50
IDLE_TIME = 2 #time when no detection occurs after showing a card

card_scan = scanner(200, 0.20, 0.1, 0.155)
card_find = card_interpreter('C:\Users\javie\OneDrive\Documentos\Tareas\Programación\Varios\card_reader\sorted_corners.csv', card_scan)
cap = initiate_capture(CAP_DEVICE)

frame_corners = []
corner_count = []
rec_frames = 0
idle = perf_counter()

while True:
    frame = get_frame(cap)
    card_scan.get_frame_modes(frame)

    #Check if there's a defined contour
    if not card_scan.get_card_edges(frame):
        frame_corners = []
        corner_count = []
        rec_frames = 0
        idle = perf_counter()
    else:
        if perf_counter() - idle > IDLE_TIME:
            frame_corners = card_scan.get_card_corners(frame)
            if frame_corners:        
                corner_count.append(len(frame_corners))
                rec_frames += 1

                if rec_frames >= FRAME_COUNT:
                    average = sum(corner_count) / rec_frames
                    print(f"best match: {card_find.identify_card(frame_corners, average)}")
                    #reset variables
                    frame_corners = []
                    corner_count = []
                    rec_frames = 0

    cv.imshow('frame', frame)
    if cv.waitKey(1) == ord('q'):
        break
    
# When everything done, release the capture
cap.release()
cv.destroyAllWindows()